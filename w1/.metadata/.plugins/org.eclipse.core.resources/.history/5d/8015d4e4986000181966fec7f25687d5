/**
 * @author Alan
 * 
 * Coursera: Princeton Algorithms and Data Structures 2
 * WordNet - Directed Graphs
 * 
 */

import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;


public class SAP {
	private final Digraph d;
	
	// constructor takes a digraph (not necessarily a DAG)
	public SAP(Digraph G) {
		d = new Digraph(G);
	}
	
	// check input integers
	private void checkInput(int v, int w) {
		if(v > d.V() - 1 || w > d.V() - 1 || v < 0 || w < 0) throw new java.lang.IllegalArgumentException("input out of bounds");
	}
	
	private void checkInput(Iterable<Integer> v, Iterable<Integer> w) {
		if (v == null || w == null) throw new java.lang.IllegalArgumentException("input null");
	}
	
	// length of shortest ancestral path between v and w; -1 if no such path
	public int length(int v, int w) {
		checkInput(v, w);
		
		BreadthFirstDirectedPaths bfdpW = new BreadthFirstDirectedPaths(d, w);
		BreadthFirstDirectedPaths bfdpV = new BreadthFirstDirectedPaths(d, v);
		
		int dist = -1;
		int ancestor = ancestor(v, w);
		if (ancestor != -1) {
			dist = bfdpW.distTo(ancestor) + bfdpV.distTo(ancestor);
		}
		return dist;
	}

	// a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
	public int ancestor(int v, int w) {
		checkInput(v, w);
		
		BreadthFirstDirectedPaths bfdpW = new BreadthFirstDirectedPaths(d, w);
		BreadthFirstDirectedPaths bfdpV = new BreadthFirstDirectedPaths(d, v);
		
		int dist = Integer.MAX_VALUE;
		int ancestor = -1;
		
		if (v == w) return w;
		
		for (int i = 0; i < d.V(); i++) {
			if (bfdpW.hasPathTo(i) && bfdpV.hasPathTo(i)) {
				int l = bfdpW.distTo(i) + bfdpV.distTo(i);
				if (l < dist) {
					dist = l;
					ancestor = i;
				}
			}
		}
		
		return ancestor;
	}

	// length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
	public int length(Iterable<Integer> v, Iterable<Integer> w) {
		checkInput(v, w);
		
		BreadthFirstDirectedPaths bfdpW = new BreadthFirstDirectedPaths(d, w);
		BreadthFirstDirectedPaths bfdpV = new BreadthFirstDirectedPaths(d, v);
		
		int dist = -1;
		int ancestor = ancestor(v, w);
		if (ancestor != -1) {
			dist = bfdpW.distTo(ancestor) + bfdpV.distTo(ancestor);
		}
		return dist;
	}

	// a common ancestor that participates in shortest ancestral path; -1 if no such path
	public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {
		checkInput(v, w);
		
		BreadthFirstDirectedPaths bfdpW = new BreadthFirstDirectedPaths(d, w);
		BreadthFirstDirectedPaths bfdpV = new BreadthFirstDirectedPaths(d, v);
		
		int dist = Integer.MAX_VALUE;
		int ancestor = -1;
		
		for (int i = 0; i < d.V(); i++) {
			if (bfdpW.hasPathTo(i) && bfdpV.hasPathTo(i)) {
				int l = bfdpW.distTo(i) + bfdpV.distTo(i);
				if (l < dist) {
					dist = l;
					ancestor = i;
				}
			}
		}
		
		return ancestor;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		In in = new In(args[0]);
		Digraph d = new Digraph(in);
		SAP sap = new SAP(d);
		while (!StdIn.isEmpty()) {
			int v = StdIn.readInt();
			int w = StdIn.readInt();
			int length = sap.length(v, w);
			int ancestor = sap.ancestor(v, w);
			StdOut.printf("length = %d, ancestor = %d\n", length, ancestor); 
		}
	}

}
