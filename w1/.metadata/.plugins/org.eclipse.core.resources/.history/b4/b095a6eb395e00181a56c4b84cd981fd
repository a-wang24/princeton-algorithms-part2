/**
 * @author Alan
 * 
 * Coursera: Princeton Algorithms and Data Structures 2
 * WordNet - Directed Graphs
 * 
 */

import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;

public class SAP {
	private Digraph d;
	private boolean[] marked;
	
	// constructor takes a digraph (not necessarily a DAG)
	public SAP(Digraph G) {
		d = new Digraph(G);
		marked = new boolean[G.V()];
	}
	
	// check input
	private void checkInput(int v, int w) {
		if(v > d.V() - 1 || w > d.V() - 1 || v < 0 || w < 0) 
			throw new java.lang.IllegalArgumentException("input out of bounds");
	}
	// length of shortest ancestral path between v and w; -1 if no such path
	public int length(int v, int w) {
		
	}

	// a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
	public int ancestor(int v, int w) {
		
	}

	// length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
	public int length(Iterable<Integer> v, Iterable<Integer> w) {
		
	}

	// a common ancestor that participates in shortest ancestral path; -1 if no such path
	public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
