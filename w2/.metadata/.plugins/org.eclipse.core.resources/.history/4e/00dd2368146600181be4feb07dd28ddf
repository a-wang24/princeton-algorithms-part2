/** 
 * @author Alan
 * Princeton Algorithms Part 2
 * Week 2: Seam Carving
 */

import edu.princeton.cs.algs4.Picture;
import edu.princeton.cs.algs4.StdOut;
/*import static java.lang.Math.sqrt;
import static java.lang.Math.pow;
import static java.lang.Math.abs;*/

public class SeamCarver {
	private Picture pic;
	//private double[] energy;

	// create a seam carver object based on the given picture
	public SeamCarver(Picture picture) {
		if (picture == null) throw new java.lang.IllegalArgumentException("picture is null");

		pic = picture;
		//energy = new double[width()*height()];
		//computeEnergy();
	}

	// current picture
	public Picture picture() {
		return pic;
	}

	// width of current picture
	public     int width() {
		return pic.width();
	}

	// height of current picture
	public     int height() {
		return pic.height();
	}

	// compute the energies
	private double[] computeEnergy() {
		double[] result = new double[width()*height()];
		for (int col = 0; col < width(); col++) {
			for (int row = 0; row < height(); row++) {
				result[oneD(col, row)] = energy(col, row);
			}
		}
		return result;
	}

	// energy of pixel at column x and row y
	public  double energy(int x, int y) {
		if (x < 0 || x > width()-1) throw new java.lang.IllegalArgumentException("x out of range");
		if (y < 0 || y > width()-1) throw new java.lang.IllegalArgumentException("y out of range");
		if (x == 0 || x == width()-1 || y == 0 || y == height()-1) return 1000;
		return Math.sqrt(Math.pow(xGradient(x, y), 2) + Math.pow(yGradient(x, y), 2));
	}

	// x gradient function
	private double xGradient(int x, int y) {
		int[] rgb1 = extractRGB(pic.getRGB(x+1, y));
		int[] rgb2 = extractRGB(pic.getRGB(x-1, y));
		return Math.pow(rgb1[0]-rgb2[0], 2) + Math.pow(rgb1[1]-rgb2[1], 2) + Math.pow(rgb1[2]-rgb2[2], 2);
	}

	// y gradient function
	private double yGradient(int x, int y) {
		int[] rgb1 = extractRGB(pic.getRGB(x, y+1));
		int[] rgb2 = extractRGB(pic.getRGB(x, y-1));
		return Math.pow(rgb1[0]-rgb2[0], 2) + Math.pow(rgb1[1]-rgb2[1], 2) + Math.pow(rgb1[2]-rgb2[2], 2);
	} 

	// compute
	// extract r, g, b components from 32-bit int
	private int[] extractRGB(int rgb) {
		int r = (rgb >> 16) & 0xFF;
		int g = (rgb >> 8)  & 0xFF;
		int b = (rgb >> 0)  & 0xFF;
		int[] components = new int[] {r, g, b};
		return components;
	}

	// sequence of indices for horizontal seam
	public   int[] findHorizontalSeam() {
		transposePic();
		int[] seam = findVerticalSeam();
		transposePic();
		
		return seam;
	}

	// sequence of indices for vertical seam
	public   int[] findVerticalSeam() {
		int n = width()*height();
		int[] pixTo = new int[n];
		double[] distTo = new double[n];
		initPixToDistTo(pixTo, distTo);

		double[] energy = computeEnergy();

		return vertSeam(pixTo, distTo, energy);
	}

	// helper function for finding vertical seams
	private int[] vertSeam(int[] pixTo, double[] distTo, double[] energy) {
		int[] seam = new int[height()];
		// loop over all rows but last one
		for (int row = 0; row < height() - 1; row++) {
			for (int col = 0; col < width(); col++) {
				int pixel = oneD(col, row);
				// relax left-lower pixel if exists
				if (col - 1 >= 0) relax(pixel, oneD(col-1, row+1), pixTo, distTo, energy);
				// relax right-lower pixel if exists
				if (col + 1 <= width()-1) relax(pixel, oneD(col+1, row+1), pixTo, distTo, energy);
				// relax middle-lower pixel
				relax(pixel, oneD(col, row+1), pixTo, distTo, energy);
			}
		}

		// find min distance in last row
		double min = Double.POSITIVE_INFINITY;
		int index = -1;
		for (int col = 0; col < width(); col++) {
			int tempInd = col + (width() * (height() - 1));
			if (distTo[tempInd] < min) {
				index = tempInd;
				min = distTo[tempInd];
			}
		}

		// find seam by following colTo backwards
		for (int row = height()-1; row >= 0; row--) {
			seam[row] = toCol(index);
			index = pixTo[index];
		}
		return seam;
	}

	// convert 1D index to column value
	private int toCol(int index) {
		return index % width();
	}

	// relax given edge
	private void relax(int from, int to, int[] pixTo, double[] distTo, double[] energy) {
		if (distTo[from] + energy[to] < distTo[to]) {
			distTo[to] = distTo[from] + energy[to];
			pixTo[to] = from;
		}
	}

	// initialize column to and distance to arrays
	private void initPixToDistTo(int[] pixTo, double[] distTo) {
		for (int col = 0; col < width(); col++) {
			for (int row = 0; row < height(); row++) {
				int pixel = oneD(col, row);
				if (col == 0) distTo[pixel] = 0;
				else distTo[pixel] = Double.POSITIVE_INFINITY;
				pixTo[pixel] = -1;
			}
		}
	}

	// return 1d index of col, row
	private int oneD(int col, int row) {
		return width() * row + col;
	}

	// remove horizontal seam from current picture
	public    void removeHorizontalSeam(int[] seam) {
		checkValidity(seam, false);
		
		transposePic();
		removeVerticalSeam(seam);
		transposePic();
	}

	// remove vertical seam from current picture
	public    void removeVerticalSeam(int[] seam) {
		checkValidity(seam, true);
		pic = removeSeam(seam);
	}

	// check validity of seam
	private void checkValidity(int[] seam, boolean vert) {
		if (seam == null) throw new java.lang.IllegalArgumentException("seam array is null");
		if (width() <= 1 || height() <= 1) throw new java.lang.IllegalArgumentException("width and height must be greater than 1");
		if (seam.length <= 1) throw new java.lang.IllegalArgumentException("seam size must be greater than 1");
		for (int i = 0; i < seam.length - 1 ; i++) {
			if (Math.abs(seam[i] - seam[i + 1]) > 1) throw new java.lang.IllegalArgumentException("seam not connected");
			if (seam[i] < 0) throw new java.lang.IllegalArgumentException("negative seam entry");
			if (vert) {
				if (seam[i] > width() - 1) throw new java.lang.IllegalArgumentException("seam entry too wide");
				if (seam.length != height()) throw new java.lang.IllegalArgumentException("seam array is improper length");
			}
			else {
				if (seam[i] > height() - 1) throw new java.lang.IllegalArgumentException("seam entry too tall");
				if (seam.length != width()) throw new java.lang.IllegalArgumentException("seam array is improper length");
			}
		}
	}

	// remove a seam from the picture and return new picture
	private Picture removeSeam(int[] seam) {
		Picture updatedPic = new Picture(width()-1, height());
		for (int row = 0; row < width(); row++) {
			for (int col = 0; col < height(); col++) {
				if (seam[row] == col) continue;
				updatedPic.setRGB(col, row, pic.getRGB(col, row));
			}
		}
		return updatedPic;
	}

	// tranpose Picture
	private void transposePic() {
		Picture transposedPic = new Picture(height(), width());
		for (int col = 0; col < width(); col++) {
			for (int row = 0; row < height(); row++) {
				transposedPic.setRGB(row, col, pic.getRGB(col, row));
			}
		}
		pic = transposedPic;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Picture picture = new Picture(args[0]);
        StdOut.printf("image is %d pixels wide by %d pixels high.\n", picture.width(), picture.height());
        
        SeamCarver sc = new SeamCarver(picture);
        
        StdOut.printf("Printing energy calculated for each pixel.\n");        

        for (int row = 0; row < sc.height(); row++) {
            for (int col = 0; col < sc.width(); col++)
                StdOut.printf("%9.0f ", sc.energy(col, row));
            StdOut.println();
        }
	}

}
